# Differential Expression Analysis HO vs RA - split by Sex

## Introduction

Differential expression analysis is a key step in the analysis of RNA-seq data. It is used to identify genes that are differentially expressed between two or more conditions. This analysis is important because it can help identify genes that are involved in the biological processes that are being studied. In this report, we will use three different methods to perform differential expression analysis: DESeq2, edgeR, and limma. We will then compare the results from these methods to identify genes that are consistently identified as differentially expressed.

```{r setup}
#| warning: FALSE
set.seed(42)
# load necessary packages
libraries <- c(
  "DESeq2", "edgeR", "ggplot2", "dplyr", "tximport", "limma", "ggVennDiagram", "cowplot",
  "openxlsx", "DT", "org.Mm.eg.db", "clusterProfiler", "RColorBrewer", "pheatmap", "ReactomePA", "msigdbr", "tidyr"
)
loaded <- lapply(libraries, require, character.only = TRUE)

comparison <- "byExpSex"

projectDir <- getwd()
resDir <- file.path(projectDir, "results", comparison)
plotDir <- file.path(resDir, "plots")
tablesDir <- file.path(resDir, "tables")

# source all files in the R directory
invisible(lapply(list.files(file.path(projectDir, "R"), full.names = TRUE), source))

padj.cutoff <- 0.05
lfc.cutoff <- 0.6
```

```{r create_directories}
#| warning: FALSE
#| echo: FALSE
#| include: FALSE
dir.create(file.path(resDir, "tables"), showWarnings = FALSE, recursive = TRUE)
dir.create(file.path(resDir, "objects"), showWarnings = FALSE, recursive = TRUE)
dir.create(plotDir, showWarnings = FALSE, recursive = TRUE)
```

```{r initialize_datatable}
#| include: FALSE
# This is a hack to get the datatables to render in the html inside a tabset
htmltools::tagList(DT::datatable(cars, extensions = "Buttons", style = "bootstrap4"))
```

```{r load_tx2gene}
#| warning: FALSE
#| echo: false
tx2gene <- read.table(file.path(projectDir, "tx2gene.tsv"))
colnames(tx2gene) <- c("TXNAME", "GENEID", "GENESYMBOL")
```

```{r setMetadata}
#| warning: FALSE
for (sex in c("Female", "Male")) {
  ddsDir <- file.path(resDir, "objects", paste0(sex, "_dds.rds"))
  if (!file.exists(ddsDir)) {
    raw_count <- read.table(file.path(projectDir, "raw_data", "GSE267573_raw_counts.csv"), header = TRUE, row.names = 1, sep = ",")
    # create a dataframe with a column named Samples with the column names of the raw counts
    metadata <- data.frame(Sample = colnames(raw_count)) |>
      dplyr::mutate(
        Condition = ifelse(grepl("H", Sample), "Oxygen", "Room_Air"),
        Sex = ifelse(grepl("F", Sample), "Female", "Male"),
        Condition = factor(Condition, levels = c("Room_Air", "Oxygen")),
        Sex = factor(Sex, levels = c("Female", "Male"))
      )
    rownames(metadata) <- metadata$Sample

    se <- CreateSummarizedExperiment(raw_count, metadata)
    # subset SummarizedExperiment to only include samples with the specified Sex
    se <- se[, se$Sex == sex]
    # Create a DESeqDataSet object
    dds <- DESeqDataSet(se, design = ~Condition)
    ddsTxi <- Filterdds(dds, groupSize = 2)
    dds <- DESeq(ddsTxi)
    saveRDS(dds, ddsDir)
  }
}
```

### Heatmap of the sample-to-sample distances

```{r sample_to_sample_heatmap}
#| warning: FALSE
#| fig-width: 8
#| fig-height: 6
#| echo: false
#| output: asis
#| panel: tabset
for (sex in c("Female", "Male")) {
  cat(paste0("\n## ", sex, "\n"))
  print(sampleDistanceHeatmap(readRDS(file.path(resDir, "objects", paste0(sex, "_dds.rds"))), labelColumns = c("Condition")))
  cat("\n")
}
```

### PCA plot

```{r pca_plot}
#| warning: FALSE
#| fig-width: 8
#| fig-height: 6
#| echo: false
#| output: asis
#| panel: tabset
for (sex in c("Female", "Male")) {
  cat(paste0("\n## ", sex, "\n"))
  print(pcaPlot(readRDS(file.path(resDir, "objects", paste0(sex, "_dds.rds"))), intgroup = c("Condition")))
  cat("\n")
}
```

Voom is a transformation method that is used to transform count data into log-counts per million (logCPM) values. This transformation is used to stabilize the variance of the data, which is important for the downstream analysis when using limma.

### Differential Expression

```{r DESeq2_DE}
#| warning: FALSE
#| error: FALSE
#| echo: false
for (sex in c("Female", "Male")) {
  dds <- readRDS(file.path(resDir, "objects", paste0(sex, "_dds.rds")))
  dgeDir <- file.path(resDir, "objects", paste0(sex, "_dge.rds"))
  if (!file.exists(dgeDir)) {
    dgeObj <- GetDGEObject(dds, group = "Condition")
    saveRDS(dgeObj, dgeDir)
  }
  dgeObj <- readRDS(dgeDir)

  deResDir <- file.path(resDir, "objects", paste0(sex, "_DE.rds"))
  if (!file.exists(deResDir)) {
    DE <- GetDE(
      dds = dds, dge = dgeObj, comparisonNameDESeq2 = "Condition_Oxygen_vs_Room_Air", comparisonNameDGE = "ConditionOxygen",
      designDGE = ~Condition, alpha = padj.cutoff, foldChangeThreshold = lfc.cutoff, verbose = FALSE
    ) 
    saveRDS(DE, deResDir)
  }
}
```

::: {.callout-note collapse="true"}
## DESeq2 Pvalue Distribution
```{r pvalue_distribution}
#| warning: FALSE
#| echo: FALSE
# Histogram of p-value distribution
pvalsMale <- readRDS(file.path(resDir, "objects", "Male_DE.rds"))$DESeq2$pvalue
hist(pvalsMale, breaks = 50, col = "skyblue", border = "white", main = "Histogram of Male p-values", xlab = "p-value")
pvalsFemale <- readRDS(file.path(resDir, "objects", "Female_DE.rds"))$DESeq2$pvalue
hist(pvalsFemale, breaks = 50, col = "skyblue", border = "white", main = "Histogram of Female p-values", xlab = "p-value")
```
:::

```{r}
#| warning: false
# Define the directory for all differential expression results
allDETableDir <- file.path(resDir, "tables", "Oxygen_vs_RoomAir_byExpSex_All.xlsx")
if (!file.exists(allDETableDir)) {
  wb <- createWorkbook()
  for (sex in c("Female", "Male")) {                                
    # add the results to the workbook
    openxlsx::addWorksheet(wb, sex)
    openxlsx::writeData(wb, sex, readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))$DESeq2, rowNames = TRUE)
  }
  saveWorkbook(wb, allDETableDir, overwrite = TRUE)
}

sigDETableDir <- file.path(resDir, "tables", "Oxygen_vs_RoomAir_byExpSex_Significant.xlsx")
if (!file.exists(sigDETableDir)) {
  wb <- createWorkbook()
  for (sex in c("Female", "Male")) {                           
    # add the results to the workbook
    openxlsx::addWorksheet(wb, sex)
    openxlsx::writeData(wb, sex, readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))$DESeq2 |> dplyr::filter(shrunken_sig_exp %in% c("UP", "DOWN")), rowNames = TRUE)
  }
  saveWorkbook(wb, sigDETableDir, overwrite = TRUE)
}
```

## Results

Different methods for differential expression analysis can yield different results. The following Venn diagrams show the overlap between the significant genes identified by DESeq2, edgeR, and limma.

```{r venn}
#| warning: FALSE
#| fig-width: 16
#| fig-height: 6
#| output: asis
#| panel: tabset
#| echo: false
for (sex in c("Female", "Male")) {
  cat(paste0("\n## ", sex, "\n"))
  DE <- readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))
  v1 <- ggVennDiagram::ggVennDiagram(
    list(
      DESeq2 = filter(DE$DESeq2, shrunken_sig_exp %in% c("UP", "DOWN")) |> rownames(),
      edgeR = filter(DE$edgeR, sig_exp %in% c("UP", "DOWN")) |> rownames(),
      limma = filter(DE$limma, sig_exp %in% c("UP", "DOWN")) |> rownames()
    )
  ) + ggtitle("DESeq2, edgeR, and limma significant genes")

  v2 <- ggVennDiagram::ggVennDiagram(
    list(
      DESeq2 = filter(DE$DESeq2, shrunken_sig_exp == "UP") |> rownames(),
      edgeR = filter(DE$edgeR, sig_exp == "UP") |> rownames(),
      limma = filter(DE$limma, sig_exp == "UP") |> rownames()
    )
  ) + ggtitle("DESeq2, edgeR, and limma upregulated genes")

  v3 <- ggVennDiagram::ggVennDiagram(
    list(
      DESeq2 = filter(DE$DESeq2, shrunken_sig_exp == "DOWN") |> rownames(),
      edgeR = filter(DE$edgeR, sig_exp == "DOWN") |> rownames(),
      limma = filter(DE$limma, sig_exp == "DOWN") |> rownames()
    )
  ) + ggtitle("DESeq2, edgeR, and limma downregulated genes")

  # plot the venn diagrams side by side
  venns <- cowplot::plot_grid(v1, v2, v3, ncol = 3)
  print(venns)
  ggsave(file.path(plotDir, paste0(sex, "_venn_diagrams_methods.pdf")), venns, width = 16, height = 6)
  cat("\n")
}
```

The following table shows the significant genes identified by each method.
Download the tables by clicking the buttons above each table.

```{r DE_tables}
#| warning: false
#| panel: tabset
#| output: asis
#| echo: false
cat("## DESeq2\n")
# Create a table for the significant genes identified by each method
for (sex in c("Male", "Female")) {
  cat(paste0("### ", sex, "\n"))
  DE <- readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))
  print(getDESeq2Table(DE$DESeq2))
  cat("\n")
}
cat("## edgeR\n")
for (sex in c("Male", "Female")) {
  cat(paste0("### ", sex, "\n"))
  DE <- readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))
  print(getEdgeRTable(DE$edgeR))
}
cat("\n")
cat("## limma\n")
for (sex in c("Male", "Female")) {
  cat(paste0("### ", sex, "\n"))
  DE <- readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))
  print(getLimmaTable(DE$limma))
}
```

```{r volcanos}
#| warning: FALSE
#| output: asis
#| panel: tabset
#| echo: false
for (sex in c("Female", "Male")) {
  cat(paste0("\n## ", sex, "\n"))
  DE <- readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))
  p <- volcanoPlot(DE$DESeq2, fc = "shrunken_log2FoldChange", padj = "padj", sig_exp = "shrunken_sig_exp", title = paste(sex, "DESeq2 Oxygen vs Room Air"), maxPvalue = 20, maxLogFC = 5)
  print(p)
  ggsave(file.path(plotDir, paste0(sex, "_volcano_plot.pdf")), p, width = 6, height = 6)
  cat("\n")
}
```

```{r heatmap}
#| warning: FALSE
#| output: asis
#| panel: tabset
#| echo: false
#| fig-width: 14
#| fig-height: 8
for (sex in c("Female", "Male")) {
  cat(paste0("\n## ", sex, "\n"))
  dds <- readRDS(file.path(resDir, "objects", paste0(sex, "_dds.rds")))
  DE <- readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))
  ht1 <- heatmapPlot(
    dds,
    DE$DESeq2 |> dplyr::filter(shrunken_sig_exp %in% c("UP", "DOWN")),
    title = "DESeq2 Oxygen vs Room Air",
    tx2gene
  )
  ComplexHeatmap::draw(ht1, auto_adjust = FALSE)
  pdf(file.path(plotDir, paste0(sex, "_heatmap_plot.pdf")), width = 14, height = 8)
  ComplexHeatmap::draw(ht1, auto_adjust = FALSE)
  dev.off()
  cat("\n")
}
```

Venn diagrams can be used to visualize the overlap between the significant genes identified by DESeq2. The following Venn diagrams show the overlap between upregulated and downregulated significant genes.

```{r venns}
#| warning: FALSE
#| fig-width: 16
#| fig-height: 10
#| output: asis
femaleDE <- readRDS(file.path(resDir, "objects", "Female_DE.rds"))$DESeq2
maleDE <- readRDS(file.path(resDir, "objects", "Male_DE.rds"))$DESeq2
v1 <- ggVennDiagram::ggVennDiagram(
  list(
    Female = filter(femaleDE, shrunken_sig_exp == "UP") |> rownames(),
    Male = filter(maleDE, shrunken_sig_exp == "UP") |> rownames()
  )
) + ggtitle("Upregulated genes")
v2 <- ggVennDiagram::ggVennDiagram(
  list(
    Female = filter(femaleDE, shrunken_sig_exp == "DOWN") |> rownames(),
    Male = filter(maleDE, shrunken_sig_exp == "DOWN") |> rownames()
  )
) + ggtitle("Downregulated genes")
v3 <- ggVennDiagram::ggVennDiagram(list(
    Female_up = filter(femaleDE, shrunken_sig_exp == "UP") |> rownames(),
    Male_up = filter(maleDE, shrunken_sig_exp == "UP") |> rownames(),
    Female_down = filter(femaleDE, shrunken_sig_exp == "DOWN") |> rownames(),
    Male_down = filter(maleDE, shrunken_sig_exp == "DOWN") |> rownames()
  )) + ggtitle("Up and downregulated genes")
# data <- process_data(v3)
# saveVennData(data, resSig, file.path(resDir, "tables", "Oxygen_vs_RoomAir_byExpSex_Venns.xlsx"))
p1 <- cowplot::plot_grid(v1, v2, ncol = 2)
p2 <- cowplot::plot_grid(p1, v3, ncol = 1)
ggsave(file.path(plotDir, "venn_diagrams_up_down.pdf"), p2, width = 12, height = 12)
print(p2)
```

```{r DE_barplot}
#| warning: FALSE
#| echo: false
femaleDE <- readRDS(file.path(resDir, "objects", "Female_DE.rds"))$DESeq2 |> dplyr::filter(shrunken_sig_exp != "NO")
maleDE <- readRDS(file.path(resDir, "objects", "Male_DE.rds"))$DESeq2 |> dplyr::filter(shrunken_sig_exp != "NO")
byExpDE <- readRDS(file.path(projectDir, "results", "byExp", "objects", "DE.rds"))$DESeq2 |> dplyr::filter(shrunken_sig_exp != "NO")

df <- data.frame(
  UP = c(nrow(femaleDE[femaleDE$shrunken_sig_exp == "UP", ]), nrow(maleDE[maleDE$shrunken_sig_exp == "UP", ]), nrow(byExpDE[byExpDE$shrunken_sig_exp == "UP", ])), 
  DOWN = c(-nrow(femaleDE[femaleDE$shrunken_sig_exp == "DOWN", ]), -nrow(maleDE[maleDE$shrunken_sig_exp == "DOWN", ]), -nrow(byExpDE[byExpDE$shrunken_sig_exp == "DOWN", ])),
  sex = c("Female", "Male", "All"),
  row.names = c("Female", "Male", "All")
) |> tidyr::pivot_longer(cols = c(UP, DOWN))

# ggplot2 stacked barplot of number of shrunken_sig_exp UP and DOWN genes
p <- ggplot2::ggplot(df, ggplot2::aes(x = sex, y = value, fill = name)) +
  ggplot2::geom_bar(stat = "identity") +
  ggplot2::scale_fill_manual(values = c("UP" = "#00BFC4", "DOWN" = "#F8766D")) +
  ggplot2::labs(x = "Comparison", y = "Number of genes") +
  ggplot2::theme_bw() +
  # add labels to bars
  ggplot2::geom_text(ggplot2::aes(label = value), vjust = -0.5, size = 4)
ggsave(file.path(plotDir, "DE_barplot.pdf"), p, width = 6, height = 6)
```

## Pathway Analysis

The genes identified as differentially expressed can be used to perform pathway analysis. This analysis can help identify the biological processes that are affected by the treatment. The following table shows the pathways that are enriched among the differentially expressed genes.

[Cluster Profiler - Overview of enrichment analysis](https://yulab-smu.top/biomedical-knowledge-mining-book/enrichment-overview.html)

```{r pathway_analysis}
#| warning: FALSE
#| echo: FALSE
for (sex in c("Female", "Male")) {
  pathwayListGSEDir <- file.path(resDir, "objects", paste0(sex, "_pathwayListGSE.rds"))
  if (!file.exists(pathwayListGSEDir)) {
    DE <- readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))
    pathwaysGSE <- GetGSEA(DE$DESeq2, statCol = "stat", organism = "mouse", sigExpCol = "shrunken_sig_exp")
    saveRDS(pathwaysGSE, pathwayListGSEDir)
  } 
  pathwayListOverRepDir <- file.path(resDir, "objects", paste0(sex, "_pathwayListOverRep.rds"))
  if (!file.exists(pathwayListOverRepDir)) {
    DE <- readRDS(file.path(resDir, "objects", paste0(sex, "_DE.rds")))
    pathwaysOverRep <- GetOverRepAnalysis(DE$DESeq2, statCol = "stat", organism = "mouse", sigExpCol = "shrunken_sig_exp")
    saveRDS(pathwaysOverRep, pathwayListOverRepDir)
  }
}
allPathwaysDir <- file.path(resDir, "objects", "all_pathwayListGSE.rds")
if (!file.exists(allPathwaysDir)) {
  malePathways <- readRDS(file.path(resDir, "objects", "Male_pathwayListGSE.rds"))$summary
  femalePathways <- readRDS(file.path(resDir, "objects", "Female_pathwayListGSE.rds"))$summary
  allPathwaysGSE <- merge_nested_df(list(Male = malePathways, Female = femalePathways)) |>
    dplyr::rename(Sex = Level1) |>
    dplyr::relocate(Sex, .before = "ID") |>
    dplyr::select(-row)
  saveRDS(allPathwaysGSE, allPathwaysDir)
}
allPathwaysGSE <- readRDS(allPathwaysDir)
allPathwaysOverRepDir <- file.path(resDir, "objects", "all_pathwayListOverRep.rds")
if (!file.exists(allPathwaysOverRepDir)) {
  malePathways <- readRDS(file.path(resDir, "objects", "Male_pathwayListOverRep.rds"))$summary
  femalePathways <- readRDS(file.path(resDir, "objects", "Female_pathwayListOverRep.rds"))$summary
  allPathwaysOverRep <- merge_nested_df(list(Male = malePathways, Female = femalePathways)) |>
    dplyr::rename(Sex = Level1) |>
    dplyr::relocate(Sex, .before = "ID") |>
    dplyr::select(-row)
  saveRDS(allPathwaysOverRep, allPathwaysOverRepDir)
}
allPathwaysOverRep <- readRDS(allPathwaysOverRepDir)
```

```{r}
#| warning: FALSE
#| echo: false
nameMap <- list(gse = "Gene Set Enrichment", overRep = "Over-representation")
descriptionMap <- list(
  gse = "Gene Set Enrichment Analysis (GSEA) is a computational method that determines whether an a priori defined set of genes shows statistically significant, concordant differences between two biological states.",
  overRep = "Over Representation Analysis (ORA) (Boyle et al. 2004) is a widely used approach to determine whether known biological functions or processes are over-represented (= enriched) in an experimentally-derived gene list, e.g. a list of differentially expressed genes (DEGs)."
)
```

```{r pathway_tables}
#| warning: FALSE
#| panel: tabset
#| output: asis
#| echo: FALSE
cat(paste0("\n## ", nameMap$gse, "\n"))
cat(descriptionMap$gse, "\n")
cat("\n All genes as input:\n")
for (sex in c("Female", "Male")) {
  cat(paste0("\n**", sex, "**\n"))
  allGenes <- readRDS(file.path(resDir, "objects", paste0(sex, "_pathwayListGSE.rds")))$summary |> dplyr::filter(Input == "all")
  if (nrow(allGenes) == 0) {
    data <- data.frame()
  } else {
    data <- table(allGenes$DB) |>
      as.data.frame() |>
      tidyr::pivot_wider(names_from = Var1, values_from = Freq)
  }
  print(htmltools::tagList(DT::datatable(data, rownames = FALSE, style = "bootstrap4", options = list(dom = 't'))))
}
cat("\n Only Significant genes as input:\n")
for (sex in c("Female", "Male")) {
  cat(paste0("\n**", sex, "**\n"))
  allGenes <- readRDS(file.path(resDir, "objects", paste0(sex, "_pathwayListGSE.rds")))$summary |> dplyr::filter(Input == "sig")
  if (nrow(allGenes) == 0) {
    data <- data.frame()
  } else {
    data <- table(allGenes$DB) |>
      as.data.frame() |>
      tidyr::pivot_wider(names_from = Var1, values_from = Freq)
  }
  print(htmltools::tagList(DT::datatable(data, rownames = FALSE, style = "bootstrap4", options = list(dom = 't'))))
}
cat(paste0("\n## ", nameMap$overRep, "\n"))
cat(descriptionMap$overRep, "\n")
cat("\n Only Significant genes as input:\n")
for (sex in c("Female", "Male")) {
  cat(paste0("\n**", sex, "**\n"))
  pathwaysOverRep <- readRDS(file.path(resDir, "objects", paste0(sex, "_pathwayListOverRep.rds")))$summary
  if (nrow(pathwaysOverRep) == 0) {
    data <- data.frame()
  } else {
    data <- table(pathwaysOverRep$Input, pathwaysOverRep$DB) |>
      as.data.frame() |>
      tidyr::pivot_wider(names_from = Var2, values_from = Freq) |>
      dplyr::rename("Input" = "Var1")
  }
  print(htmltools::tagList(DT::datatable(data, rownames = FALSE, style = "bootstrap4", options = list(dom = 't'))))
}
```

Heatmap of the significant pathways identified by GSEA. The heatmap shows the normalized enrichment scores (NES) for each pathway in Female and Males Samples.

```{r pathway_heatmap}
#| warning: FALSE
#| message: FALSE
#| echo: false
p <- plotPathwayHeatmap(allPathwaysGSE)
print(p)
pdf(file.path(plotDir, "pathway_heatmap.pdf"), width = 14, height = 8)
print(p)
dev.off()
```

Overlapping pathways can be visualized using Venn diagrams. The following Venn diagrams show the overlap between the significant pathways identified by Over Representation analysis.

```{r pathwayOverRep_venn}
#| warning: FALSE
#| echo: false
p <- plotOverRepVenn(allPathwaysOverRep)
print(p)
ggsave(file.path(plotDir, "pathway_venn.pdf"), p, width = 6, height = 6)
```

```{r pathwayGSE_venn}
#| warning: FALSE
#| echo: false
p <- plotOverRepVenn(allPathwaysGSE)
print(p)
ggsave(file.path(plotDir, "pathwayGSE_venn.pdf"), p, width = 6, height = 6)
```

```{r pathwayGSE_barplot}
#| warning: FALSE
#| echo: false
pathwaysFemale <- c(
  "Neutrophil degranulation", "DNA Double Strand Break Response", "Mismatch repair - Mus musculus (house mouse)",
  "response to interferon-beta", "cellular response to interferon-beta", "HALLMARK_TGF_BETA_SIGNALING"
)
pathwaysMale <- c(
  "Cellular Senescence", "Oxidative phosphorylation - Mus musculus (house mouse)", "Respiratory electron transport", "The citric acid (TCA) cycle and respiratory electron transport", "Metabolism of carbohydrates", "Glucose metabolism", "T cell migration", "aerobic electron transport chain", "ossification", "regulation of ossification", "NOTCH1 Intracellular Domain Regulates Transcription"
)
femaleBar <- plotGSEComparisonLollipop(allPathwaysGSE, nameCol = "Description",
  title = "GSEA Female Pathways", filter = list(Female = pathwaysFemale), splitCol = "Sex")
maleBar <- plotGSEComparisonLollipop(allPathwaysGSE, nameCol = "Description",
  title = "GSEA Male Pathways", filter = list(Male = pathwaysMale), splitCol = "Sex")
femaleBar
maleBar
pdf(file.path(plotDir, "pathwayGSE_barplot.pdf"), width = 12, height = 8)
print(femaleBar)
print(maleBar)
dev.off()
# pathwaysAlveolar <- c(
#   "fatty acid oxidation", "Cytoprotection by HMOX1", "PPAR signaling pathway - Mus musculus (house mouse)", "HALLMARK_OXIDATIVE_PHOSPHORYLATION", "HALLMARK_FATTY_ACID_METABOLISM", "activation of innate immune response", "HALLMARK_GLYCOLYSIS", "DNA Double-Strand Break Repair", "Homology Directed Repair", "positive regulation of cell cycle process", "Cell Cycle, Mitotic"
# )
# alveolarBar <- plotGSEComparison(allTimepointsPathways, nameCol = "Description", nesCol1 = "byExp_NES", title = "GSEA Pathways", filter = pathwaysAlveolar)
# ggsave(file.path(plotDir, "pathwayGSE_barplot_alveolar.pdf"), alveolarBar, width = 10, height = 8)
```

```{r getHomerFiles}
#| warning: FALSE
#| echo: FALSE
for (sex in c("Female", "Male")) {
  deResDir <- file.path(resDir, "objects", paste0(sex, "_DE.rds"))
  DE <- readRDS(deResDir)
  SaveHomerList(DE$DESeq2, "SYMBOL", "shrunken_sig_exp", file.path(resDir, "tables"), paste0(sex, "_Oxygen_vs_RoomAir"))
}
```

```{r HomerHeatmaps}
#| warning: false
#| echo: false
maleDds <- readRDS(file.path(resDir, "objects", paste0("Male", "_dds.rds")))
maleHeatmap <- homerHeatmapPlot(maleDds, genes = c("Runx2", "Tcf7"), tx2gene = tx2gene, zscore = FALSE)
femaleDds <- readRDS(file.path(resDir, "objects", paste0("Female", "_dds.rds")))
femaleHeatmap <- homerHeatmapPlot(femaleDds, genes = c("Klf4", "Irf1", "Irf2", "Irf4"), tx2gene = tx2gene, zscore = FALSE)
pdf(file.path(plotDir, "homerHeatmap.pdf"))
print(maleHeatmap)
print(femaleHeatmap)
dev.off()
```

::: {.callout-note collapse="true"}
## Session information
```{r sessionInfo}
sessionInfo()
```
:::